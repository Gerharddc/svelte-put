import type { TocInitEventDetails, TocChangeEventDetails } from './toc.events';
import type { TocObserveParameters } from './toc.parameters';

/**
 * Data attributes to override `toc` behavior per matching element
 * @public
 */
export interface TocDataAttributes {
  /** whether to ignore this element when searching for matching elements */
  'data-toc-ignore'?: boolean;
  /**
   * the `id` to use for this element in `toc` context. If not provided, this
   * will be the element `id`, or generated by `toc`
   * if element does not have an `id` either.
   */
  'data-toc-id'?: string;
  /**
   * override the `strategy` for this element to use in creating
   * `IntersectionObserver` This only has effect if the `observe`
   * option is enabled in {@link TocParameters}
   */
  'data-toc-strategy'?: TocObserveParameters['strategy'];
  /**
   * override the `threshold` for this element to use in creating
   * `IntersectionObserver` This only has effect if the `observe`
   * option is enabled in {@link TocParameters}
   */
  'data-toc-threshold'?: number;
}

/**
 * ambient typing for `toc` event handlers
 * @public
 */
export interface TocEventAttributes {
  'on:tocinit'?: (event: CustomEvent<TocInitEventDetails>) => void;
  'on:tocchange'?: (event: CustomEvent<TocChangeEventDetails>) => void;
}

/**
 * all relevant data attribute name literals
 * @internal
 */
export const ATTRIBUTES = {
  // markers from `@svelte-put/preprocess-auo-slug`
  autoslug: 'data-auto-slug',
  autoSlugAnchor: 'data-auto-slug-anchor',
  autoSlugAnchorPosition: 'data-auto-slug-anchor-position',
  // markers
  toc: 'data-toc',
  anchor: 'data-toc-anchor',
  // customization per matching element
  id: 'data-toc-id',
  ignore: 'data-toc-ignore',
  strategy: 'data-toc-strategy',
  threshold: 'data-toc-threshold',
  // tracking information for `IntersectionObserver`
  observeFor: 'data-toc-observe-for',
};
