{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.23.2",
    "schemaVersion": 1005,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@svelte-put/movable!",
  "docComment": "/**\n * svelte action - `use:movable` move node on mousedown\n *\n * @packageDocumentation\n */\n",
  "name": "@svelte-put/movable",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@svelte-put/movable!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@svelte-put/movable!movable:function(1)",
          "docComment": "/**\n * Trigger node displacement on mousedown (via position.left & position.top)\n *\n * @remarks\n *\n * `movable` should be use with element not svelte component\n * ```svelte\n * <-- correct usage-->\n *  <div use:movable />\n *\n * <-- incorrect usage-->\n * <Component use:movable/>\n * ```\n *\n * Be aware of side effects:\n *\n * - element.style.position is set to `relative` (if not already 'absolute' / 'relative') the first time mousedown is triggered\n *\n * - document.body.userSelect is set to `none` after `mousedown` and restored on `mouseup`\n *\n * - document.body.cursor is set to `move` after `mousedown` and restored on `mouseup`\n *\n * @param node - HTMLElement to be moved\n *\n * @param parameters - svelte action parameters\n *\n * @returns svelte action interface\n *\n * @example\n *\n * Typical usage\n *\n * 1. `mousedown` of the trigger `button` element, a `CustomEvent` `movablestart`is dispatched,\n *\n * 2. `mousemove` will trigger `div` to move accordingly;\n *\n * 3. movement will be limited to the border of the `containerNode`, plus and minus 20% of the width & height of the `div` that the action is being used on,\n *\n * 4. `mouseup` will stop the movement; a `CustomEvent` `movableend` is dispatched.\n * ```svelte\n * <script lang=\"ts\">\n *   import { fade } from 'svelte/transition'\n *   import arrows from 'svelte-awesome/icons/arrows';\n *   import Icon from 'svelte-awesome/components/Icon.svelte';\n *\n *   let modal = false;\n *   let triggerNode: HTMLElement;\n *   let containerNode: HTMLElement;\n * </script>\n *\n * <container>\n *   <!-- ... some other content ... -->\n *\n *   {#if modal}\n *     <div\n *       transition:fade={{ duration: 200 }}\n *       class=\"absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 w-full max-w-sm\"\n *       use:movable={{\n *         limit: {\n *           delta: '20%',\n *           parent: containerNode,\n *         },\n *         trigger: triggerNode,\n *       }}\n *       on:movablestart={(event) => console.log('movable:start', event.detail.node, event.detail.position)}\n *       on:movableend={(event) => console.log('movable:end', event.detail.node, event.detail.position)}\n *     >\n *       <button\n *         bind:this={triggerNode}\n *         class=\"c-btn-icon absolute top-2 right-10 hover:cursor-move\"\n *       >\n *         <Icon data={arrows} />\n *       </button>\n *\n *       <!-- ... some other modal content ... -->\n *     </div>\n * {/if}\n *\n * </container>\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function movable(node: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", parameters?: "
            },
            {
              "kind": "Reference",
              "text": "MovableParameters",
              "canonicalReference": "@svelte-put/movable!MovableParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    update(parameters: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MovableParameters",
              "canonicalReference": "@svelte-put/movable!MovableParameters:interface"
            },
            {
              "kind": "Content",
              "text": ">): void;\n    destroy(): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "node",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "parameters",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "movable"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@svelte-put/movable!MovableEventDetails:interface",
          "docComment": "/**\n * `detail` payload for `movableend` and `movablestart` CustomEvent\n *\n * @example\n * ```svelte\n * <script>\n *  function handler(event) {\n *    const { position, node } = event.detail;\n *    console.log('action movable was used on element', node);\n *    console.log('last known position:', position);\n * }\n * </script>\n *\n * <div\n *  use:movable\n *  on:movablestart={handler}\n *  on:movableend={handler}\n * />\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MovableEventDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "MovableEventDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/movable!MovableEventDetails#node:member",
              "docComment": "/**\n * the node that the action was placed on\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "node: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "node",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/movable!MovableEventDetails#position:member",
              "docComment": "/**\n * last known position, as in styles.position\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "position: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        left: number;\n        top: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@svelte-put/movable!MovableLimit:interface",
          "docComment": "/**\n * The limit within which node can be moved\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MovableLimit "
            }
          ],
          "releaseTag": "Public",
          "name": "MovableLimit",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/movable!MovableLimit#delta:member",
              "docComment": "/**\n * Bounding box limit in both axes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delta?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        x: "
                },
                {
                  "kind": "Reference",
                  "text": "MovableLimitDelta",
                  "canonicalReference": "@svelte-put/movable!MovableLimitDelta:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        y: "
                },
                {
                  "kind": "Reference",
                  "text": "MovableLimitDelta",
                  "canonicalReference": "@svelte-put/movable!MovableLimitDelta:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | "
                },
                {
                  "kind": "Reference",
                  "text": "MovableLimitDelta",
                  "canonicalReference": "@svelte-put/movable!MovableLimitDelta:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "delta",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/movable!MovableLimit#parent:member",
              "docComment": "/**\n * Move node within this parent node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parent?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "parent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@svelte-put/movable!MovableLimitDelta:type",
          "docComment": "/**\n * Limit by creating a bounding box of movable area [-delta, +delta] in both axes\n *\n * @remarks\n *\n * - If a single value is provided, it will be applied to both axes. - If parent is set, the delta value is additive. It will be added beyond the parent bounds. For example, for y-axis [-delta + parent.top, parent.bottom + delta]. - If percentage is used, it will be relative to the width / height of the **node** itself. - Currently only `px` and `%` are supported. See example for usage.\n *\n * @example\n * ```svelte\n * <-- limit movement to [- 20% * width, + 20% * width] in x-axis and [- 20% * height, + 20% * height] in y-axis -->\n * <div use:movable={{\n *    delta: '20%',\n * }} />\n *\n * <-- use pixel unit -->\n * <div use:movable={{\n *    delta: '200px',\n * }} />\n *\n * <-- mix pixel and percentage -->\n * <div use:movable={{\n *    delta: { x: 20%, y: '400px' },\n * }} />\n *\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MovableLimitDelta = "
            },
            {
              "kind": "Content",
              "text": "`${number}px` | `${number}%`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MovableLimitDelta",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@svelte-put/movable!MovableParameters:interface",
          "docComment": "/**\n * svelte action parameters to config behavior of movable\n *\n * @remarks\n *\n * `movable` support reactive parameters. That means they can be updated after initialization.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MovableParameters "
            }
          ],
          "releaseTag": "Public",
          "name": "MovableParameters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/movable!MovableParameters#enabled:member",
              "docComment": "/**\n * whether to trigger the action\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/movable!MovableParameters#limit:member",
              "docComment": "/**\n * Set a limit within which node can be moved\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "limit?: "
                },
                {
                  "kind": "Reference",
                  "text": "MovableLimit",
                  "canonicalReference": "@svelte-put/movable!MovableLimit:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "limit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/movable!MovableParameters#trigger:member",
              "docComment": "/**\n * A node that triggers mousedown event, otherwise the node itself is the trigger\n *\n * @remarks\n *\n * Trigger should be an HTMLElement not a Svelte component.\n * ```svelte\n * <div use:movable={{ trigger }}/>\n *\n * <-- correct usage-->\n *  <div bind:this={trigger} />\n *\n * <-- incorrect usage-->\n * <Component bind:this={trigger} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trigger?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "trigger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
