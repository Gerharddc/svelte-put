{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.23.2",
    "schemaVersion": 1005,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@svelte-put/intersect!",
  "docComment": "/**\n * svelte action - `use:intersect` svelte action that wraps IntersectionObserver\n *\n * @packageDocumentation\n */\n",
  "name": "@svelte-put/intersect",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@svelte-put/intersect!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@svelte-put/intersect!intersect:function(1)",
          "docComment": "/**\n * Create an IntersectionObserver that observers the node\n *\n * @param node - HTMLElement to observe\n *\n * @param parameters - svelte action parameters\n *\n * @returns svelte action interface\n *\n * @example\n *\n * Typical use to observe the first time the node intersects with viewport for transition effect (like fade-in)\n * ```svelte\n * <script lang=\"ts\">\n *  import { intersect, type IntersectDetail } from '@svelte-put/intersect';\n *\n *  let once = false;\n *\n *  function onIntersectOnce(event: CustomEvent<IntersectDetail>) {\n *    const { observer, entries } = event.detail;\n *\n *    // because only one threshold is input for the action, only one entry will be recorded here\n *    const entry = entries[0];\n *    once = entry.isIntersecting; // isIntersecting is always true, meaning the section is being scrolled into view.\n *  }\n *\n *  function onIntersect(event: CustomEvent<IntersectDetail>) {\n *    const { observer, entries } = event.detail;\n *    console.log('action intersect was used on element', observer.target);\n *    console.log('list of IntersectionObserverEntry:', entries);\n *  }\n * </script>\n *\n * <section\n *  class=\"{once ? 'animate-fade-in-up' : 'opacity-0'}\"\n *  use:intersect={{ threshold: 0.4 }}\n *  on:intersectonce={onIntersectOnce}\n *  on:intersect={onIntersect}\n * >\n *  <p>\n *    A section that will fade in once, when intersected with viewport by 40%,\n *    and stays static afterwards. No other `intersectonce` event will be dispatched,\n *    but subsequent `intersect` events will still be listened for.\n *  </p>\n * </section>\n * ```\n *\n * @example\n *\n * Typical use to observe intersection\n * ```svelte\n * <script lang=\"ts\">\n *  import { intersect, type IntersectDetail } from '@svelte-put/intersect';\n *\n *  let intersecting: boolean | undefined = undefined;\n *\n *  function onIntersect(event: CustomEvent<IntersectDetail>) {\n *    const { observer, entries } = event.detail;\n *    console.log('action intersect was used on element', observer.target);\n *    console.log('list of IntersectionObserverEntry:', entries);\n *\n *    // because only one threshold is input for the action, only one entry will be recorded here\n *    const entry = entries[0];\n *    intersecting = entry.isIntersecting;\n *  }\n * </script>\n *\n * <section\n * >\n *  <p>\n *    A section that reacts to when scrolling in view (intersecting === true)\n *    and scrolling out of view (intersecting === false)\n *  </p>\n *  {#if intersecting !== undefined}\n *    <p class=\"self-end\">Scrolling {intersecting ? 'into view' : 'out of view'}...</p>\n *  {/if}\n * </section\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function intersect(node: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", parameters?: "
            },
            {
              "kind": "Reference",
              "text": "IntersectParameters",
              "canonicalReference": "@svelte-put/intersect!IntersectParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    update(update: "
            },
            {
              "kind": "Reference",
              "text": "IntersectParameters",
              "canonicalReference": "@svelte-put/intersect!IntersectParameters:interface"
            },
            {
              "kind": "Content",
              "text": "): void;\n    destroy(): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "node",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "parameters",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "intersect"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@svelte-put/intersect!IntersectDetail:interface",
          "docComment": "/**\n * `detail` payload for `intersect` and `intersectonce` CustomEvent\n *\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IntersectDetail "
            }
          ],
          "releaseTag": "Public",
          "name": "IntersectDetail",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/intersect!IntersectDetail#entries:member",
              "docComment": "/**\n * list of IntersectionObserverEntry passed from IntersectionObserver callback\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly entries: "
                },
                {
                  "kind": "Reference",
                  "text": "IntersectionObserverEntry",
                  "canonicalReference": "!IntersectionObserverEntry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "entries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/intersect!IntersectDetail#observer:member",
              "docComment": "/**\n * the IntersectionObserver itself\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly observer: "
                },
                {
                  "kind": "Reference",
                  "text": "IntersectionObserver",
                  "canonicalReference": "!IntersectionObserver:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "observer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@svelte-put/intersect!IntersectParameters:interface",
          "docComment": "/**\n * svelte action parameters to config behavior of `movable`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IntersectParameters extends "
            },
            {
              "kind": "Reference",
              "text": "IntersectionObserverInit",
              "canonicalReference": "!IntersectionObserverInit:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IntersectParameters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@svelte-put/intersect!IntersectParameters#enabled:member",
              "docComment": "/**\n * whether the IntersectionObserver should observer the node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        }
      ]
    }
  ]
}
